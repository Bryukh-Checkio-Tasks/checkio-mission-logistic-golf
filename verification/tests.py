"""
TESTS is a dict with all you tests.
Keys for this will be categories' names.
Each test is dict with
    "input" -- input data for user function
    "answer" -- your right answer
    "explanation" -- not necessary key, it's using for additional info in animation.
"""

TESTS = {
    "Basics": [
        {
            "input": [[0, 80, 58, 0], [80, 0, 71, 80], [58, 71, 0, 58], [0, 80, 58, 0]],
            "answer": 116,
            "explanation": [[[1, 1], [1, 9], [6, 4], [9, 9]], (0, 2, 3)]
        },
        {
            "input": [[0, 57, 0, 0, 0], [57, 0, 71, 0, 0], [0, 71, 0, 45, 0], [0, 0, 45, 0, 58],
                      [0, 0, 0, 58, 0]],
            "answer": 231,
            "explanation": [[[5, 5], [1, 1], [2, 8], [6, 6], [9, 1]], (0, 1, 2, 3, 4)]
        },
        {
            "input": [[0, 57, 42, 0, 14, 0], [57, 0, 71, 0, 0, 0], [42, 71, 0, 51, 0, 0],
                      [0, 0, 51, 0, 42, 0], [14, 0, 0, 42, 0, 0], [0, 0, 0, 0, 0, 0]],
            "answer": 0,
            "explanation": [[[5, 5], [1, 1], [2, 8], [3, 3], [6, 6], [9, 1]], ()]
        },
    ],
    "Extra": [
        {
            "input": [[0, 22, 0, 32, 10, 0, 30, 0, 45, 0, 0, 32, 0, 10, 57, 0, 32, 0],
                      [22, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 41, 0, 0, 36, 40, 0, 0],
                      [0, 0, 0, 63, 0, 0, 41, 0, 32, 71, 51, 0, 63, 0, 0, 64, 40, 94],
                      [32, 0, 63, 0, 0, 0, 0, 0, 32, 0, 0, 60, 0, 0, 0, 0, 0, 0],
                      [10, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 50, 32, 0, 0],
                      [0, 40, 0, 0, 0, 0, 0, 22, 22, 64, 41, 0, 54, 0, 0, 0, 0, 0],
                      [30, 0, 41, 0, 20, 0, 0, 0, 0, 41, 0, 0, 0, 32, 41, 0, 10, 57],
                      [0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0],
                      [45, 0, 32, 32, 0, 22, 0, 0, 0, 0, 20, 0, 42, 0, 0, 0, 0, 0],
                      [0, 0, 71, 0, 0, 64, 41, 0, 0, 0, 60, 14, 0, 0, 0, 10, 0, 0],
                      [0, 0, 51, 0, 0, 41, 0, 0, 20, 60, 0, 51, 32, 36, 28, 0, 0, 0],
                      [32, 41, 0, 60, 0, 0, 0, 42, 0, 14, 51, 0, 0, 0, 76, 0, 45, 0],
                      [0, 0, 63, 0, 0, 54, 0, 0, 42, 0, 32, 0, 0, 0, 58, 0, 0, 0],
                      [10, 0, 0, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 0, 28, 0, 0],
                      [57, 36, 0, 0, 50, 0, 41, 0, 0, 0, 28, 76, 58, 0, 0, 0, 32, 0],
                      [0, 40, 64, 0, 32, 0, 0, 0, 0, 10, 0, 0, 0, 28, 0, 0, 0, 0],
                      [32, 0, 40, 0, 0, 0, 10, 0, 0, 0, 0, 45, 0, 0, 32, 0, 0, 64],
                      [0, 0, 94, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0]],
            "answer": 87,
            "explanation": [
                [(5, 2), (6, 4), (6, 9), (8, 3), (5, 3), (6, 8), (5, 5), (5, 6), (7, 6), (1, 4),
                 (7, 4), (2, 3), (4, 3), (4, 2), (9, 6), (2, 4), (6, 5), (1, 1)], (0, 4, 6, 17)]
        },
        {
            "input": [[0, 10, 0, 0, 61, 14, 0, 32, 0, 0], [10, 0, 10, 0, 51, 0, 0, 0, 0, 0],
                      [0, 10, 0, 36, 41, 0, 0, 0, 0, 50], [0, 0, 36, 0, 0, 22, 0, 0, 71, 0],
                      [61, 51, 41, 0, 0, 50, 0, 0, 0, 0], [14, 0, 0, 22, 50, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 76], [32, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 71, 0, 0, 0, 0, 0, 0], [0, 0, 50, 0, 0, 0, 76, 0, 0, 0]],
            "answer": 70,
            "explanation": [
                [(4, 7), (4, 6), (4, 5), (2, 8), (3, 1), (3, 6), (4, 2), (3, 4), (1, 1), (7, 9)],
                (0, 1, 2, 9)]
        },
        {
            "input": [[0, 0, 42, 0, 10, 0, 0, 41, 0, 0, 54, 0, 0, 0, 0, 51, 71, 0, 0],
                      [0, 0, 0, 0, 42, 0, 20, 0, 81, 0, 0, 0, 0, 61, 28, 22, 0, 0, 58],
                      [42, 0, 0, 0, 0, 10, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 14, 0, 20, 0, 50, 0, 71, 36, 0, 42, 0, 36, 0, 40],
                      [10, 42, 0, 0, 0, 32, 0, 0, 0, 50, 0, 0, 61, 36, 14, 54, 0, 0, 20],
                      [0, 0, 10, 14, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0],
                      [0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 22, 67, 45, 0, 36, 0, 0],
                      [41, 0, 22, 20, 0, 0, 0, 0, 0, 64, 14, 0, 0, 0, 0, 0, 30, 0, 45],
                      [0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 50, 50, 0, 0, 64, 0, 0, 0, 0, 85, 28, 0, 86, 86, 76, 0],
                      [54, 0, 0, 0, 0, 0, 40, 14, 0, 0, 0, 0, 0, 0, 0, 30, 22, 0, 0],
                      [0, 0, 0, 71, 0, 0, 0, 0, 94, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 36, 61, 0, 22, 0, 0, 85, 0, 73, 0, 0, 0, 0, 0, 0, 0],
                      [0, 61, 0, 0, 36, 0, 67, 0, 0, 28, 0, 0, 0, 0, 41, 58, 0, 0, 0],
                      [0, 28, 0, 42, 14, 0, 45, 0, 0, 0, 0, 0, 0, 41, 0, 41, 0, 0, 0],
                      [51, 22, 0, 0, 54, 0, 0, 0, 0, 86, 30, 0, 0, 58, 41, 0, 0, 20, 0],
                      [71, 0, 0, 36, 0, 0, 36, 30, 0, 86, 22, 0, 0, 0, 0, 0, 0, 45, 73],
                      [0, 0, 0, 0, 0, 30, 0, 0, 0, 76, 0, 0, 0, 0, 0, 20, 45, 0, 0],
                      [0, 58, 0, 40, 20, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0]],
            "answer": 30,
            "explanation": [
                [(2, 7), (5, 9), (5, 4), (6, 4), (2, 6), (5, 5), (7, 9), (6, 6), (6, 1), (2, 1),
                 (7, 5), (1, 9), (8, 7), (4, 3), (3, 7), (7, 8), (9, 6), (5, 8), (2, 4)],
                (0, 4, 18)]
        },
        {
            "input": [[0, 51, 0, 0, 63, 0, 0, 0, 0, 63], [51, 0, 51, 81, 0, 0, 0, 0, 0, 0],
                      [0, 51, 0, 0, 0, 0, 0, 0, 0, 0], [0, 81, 0, 0, 81, 0, 0, 0, 0, 0],
                      [63, 0, 0, 81, 0, 0, 0, 76, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 22, 45],
                      [0, 0, 0, 0, 0, 0, 0, 67, 0, 0], [0, 0, 0, 0, 76, 0, 67, 0, 36, 0],
                      [0, 0, 0, 0, 0, 22, 0, 36, 0, 0], [63, 0, 0, 0, 0, 45, 0, 0, 0, 0]],
            "answer": 63,
            "explanation": [
                [(3, 2), (8, 1), (7, 6), (9, 9), (1, 8), (1, 6), (1, 7), (4, 1), (2, 4), (5, 8)],
                (0, 9)]
        },
        {
            "input": [[0, 0, 0, 28, 0, 0, 10, 0, 0, 0, 0, 45, 0, 0, 0],
                      [0, 0, 92, 14, 0, 71, 0, 0, 0, 0, 41, 0, 0, 0, 0],
                      [0, 92, 0, 0, 0, 0, 72, 0, 0, 0, 63, 0, 0, 0, 0],
                      [28, 14, 0, 0, 0, 0, 0, 0, 0, 0, 36, 45, 0, 73, 0],
                      [0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 71, 0, 0, 45, 0, 0, 0, 0, 0, 78, 0, 0, 0, 73],
                      [10, 0, 72, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 51, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 28, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 51, 32, 0, 0, 0, 14, 58, 51],
                      [0, 41, 63, 36, 0, 78, 20, 0, 0, 0, 0, 54, 0, 0, 0],
                      [45, 0, 0, 45, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 28, 14, 0, 0, 0, 0, 0],
                      [0, 0, 0, 73, 0, 0, 51, 0, 0, 58, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 73, 0, 0, 0, 51, 0, 0, 0, 0, 0]],
            "answer": 170,
            "explanation": [
                [(5, 3), (8, 2), (2, 9), (7, 1), (5, 7), (9, 9), (6, 3), (1, 8), (1, 6), (2, 3),
                 (4, 3), (9, 5), (3, 4), (5, 8), (7, 2)], (0, 6, 13, 9, 14)]
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 0, 0, 0],
                      [0, 0, 41, 20, 0, 0, 0, 0, 36, 0, 0, 32, 0, 40],
                      [0, 41, 0, 22, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 20, 22, 0, 0, 10, 0, 0, 50, 0, 0, 32, 0, 0],
                      [0, 0, 50, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 10, 0, 0, 0, 0, 58, 0, 32, 0, 0, 0],
                      [0, 0, 0, 0, 76, 0, 0, 0, 41, 67, 54, 0, 20, 71],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0],
                      [0, 36, 0, 50, 0, 58, 41, 0, 0, 51, 72, 0, 22, 0],
                      [36, 0, 0, 0, 0, 0, 67, 0, 51, 0, 0, 0, 61, 0],
                      [36, 0, 0, 0, 0, 32, 54, 0, 72, 0, 0, 0, 0, 0],
                      [0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0],
                      [0, 0, 0, 0, 0, 0, 20, 51, 22, 61, 0, 57, 0, 0],
                      [0, 40, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0]],
            "answer": 138,
            "explanation": [
                [(6, 9), (5, 4), (4, 8), (5, 6), (9, 8), (5, 7), (6, 1), (3, 6), (2, 2), (3, 7),
                 (8, 6), (8, 5), (4, 1), (5, 8)], (0, 10, 5, 3, 1, 13)]
        },
    ],
    "Random": [

    ]
}

from random import randint, random


def generate_points(quantity=20):
    points = set()
    while len(points) < quantity:
        new_point = (randint(1, 9), randint(1, 9))
        if new_point in points:
            continue
        points.add(new_point)
    return list(points)


def generate_roads(points, density=0.5):
    roads = []
    for i in range(len(points)):
        for j in range(i + 1, len(points)):
            if random() < density:
                roads.append([i, j])
    return roads


from math import hypot

from heapq import heappop, heappush, heapify


def solution(matrix):
    N = len(matrix) - 1
    heap = []
    heapify(heap)
    visited = set()
    heappush(heap, (0, 0, (0,)))
    while heap:
        total, current, path = heappop(heap)
        if current == N:
            return total, path
        if current in visited:
            continue
        visited.add(current)
        for i, d in enumerate(matrix[current]):
            if d:
                new_path = path + (i,)
                heappush(heap, (total + d, i, new_path))
    return 0, ()


def convert_map(points, connections):
    matrix = [[0] * len(points) for _ in range(len(points))]
    for f, s in connections:
        distance = hypot(points[f][0] - points[s][0], points[f][1] - points[s][1])
        matrix[f][s] = matrix[s][f] = round(distance * 10)
    return matrix


for _ in range(8):
    p = generate_points(randint(10, 20))
    c = generate_roads(p, 0.4)
    m = convert_map(p, c)
    ans, path = solution(convert_map(p, c))
    TESTS["Random"].append({
        "input": m,
        "answer": ans,
        "explanation": [p, path]})